https://www.youtube.com/watch?v=76wgEnZC8Qg
19:40
에디터 vi (vim)
1.컨텐츠는 집중하지 않는다. 어떻게 덩어리를 분석할 것인가 고민한다.
2.main은 전체 페이지 중에서 하나만 존재한다.
3.프로젝트할 때는 reset.css 평소에는 하지 않고 작업한다.(공부)
    reset.css 다른 개발자가 시행착오한 최종 결과물
4.https://swiperjs.com/ 스와이퍼 
    메뉴 중 demos // 슬라이더 많이 씀. 34:25
5.46:30
  layout_wrapper // 레이아웃만 담당.
  CSS 도 체계적으로 관리해야함.
6. 네이버 메인 1080px // width
7. 테이블 테그를 이용하면 반응형 작업하기에 적합하지 않다.
    Flax box 또는  grid  를 사용 하는걸 추천.
8.1:07:00
 로고의 기능 클릭시 처음으로 이동 a tag
9.클래스 작명시 접두어를 활용한다.
10. 작업자가 규칙을 정하고, 지킨다. // 클래스 작명시.일관성이 아주 중요.
11.디센던트 컴비네이터 : css 에서 클래스 선택시 한칸 띄우고 하위 요소 선택하는 것.
    실무에서는 회사별 '코딩 컨벤션'이 있어서 따라 하면 됨.
12.1:26:45 이미지 무쓸모 공간 없애기
        img {
        vertical-align: top;
        }
        P 테그에도 상하단 마진 존재
13. 시각적인 힌트를 많이 얻을 수 있는 방법 // 상황파악하기 위해서
    border, background-color, box-shadow 
14.1:37:10
   페이지에 이미지가 로드가 조금 늦을 때 높이가 들쭉 날쭉 할 수 있어서.
   높이를 주는 것을 추천한다.
   이미지가 없든 있든 공간을 확보하게 만든다.
15.이미지가 안 줄어들때 초기화
     max-width: 100%;
     height: auto;
16.1:43:56
    가상요소를 만들때 상위요소에 display:flex  를 주면 가상요소 확인 가능.
    background-color: currentColor;  
    가상요소 플렉스 아이템이 된다.
    1:46:38 가상요소 신비로움 예
    css 라이브러리에서  divider 컴포넌트로 hr처럼 쓰더라.

---1:51:54 하단코드 시작---
17.2:00:43
    flex-basis는 기본이 auto >> 컨텐츠 크기만큼이라는 뜻.
18.2:04:25
    왼쪽 사이드바를 전체적인 덩어리로 components
    왼쪽 사이드바에 대한 설명
19.flex-box 공부를 제대로 해야함.
20.2:28:22
    인접 형제 셀렉터
    제이슨 시블링스 컴비네이터

---------------2:32:52 우측------------------
21.관례적 클래스 네임 
    ul 는 l_row
    li 는 l_col

22.2:35:25
    grid 는 동일한 덩어리들이 반복되는 구조.
    하나의 주제가 있고, 그 것에 따른 리스트들이 있슴.(보편적)

23.2:39:50
    gap 과 margin 의 차이점
    row-gap
    column-gap
24:2:49:00
    header 와 footer는 한번만 들어가야 하나요?
    section안에 들어가는 것은 일반적으로 쓰임.
25.2:51:00
    사이드바가 오른쪽의 컨텐츠 때문에 줄어들었을때 
    문제점 해결.
    ** flex를 다룰때 주의 사항
26. 3:03:00
    버튼의 사고 방식
    div,h1,p >> 컨텐츠를 감싸는 컨테이너 개념
    그래서 display : block  을 했을 때
    부모가 제공해주는 컨테츠 크기만큼 가득 찬다.
    근데 버튼은 안그런다.그래서 width:100%를 해줘야 꽉참.
